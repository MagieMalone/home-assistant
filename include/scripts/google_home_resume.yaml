# Script to resume streams on Google Home speakes after it has been interrupted by service calls
# Supports resuming of Spotify and online streams (like TuneIn)
# for more details: https://github.com/TheFes/HA-configuration/blob/main/include/script/00_general/google_cast/docs/google_home_resume.md
# 
google_home_resume:
  alias: "00 ğŸ”Š Google Home Resume"
  description: Script for resuming Google Home speakers
  icon: mdi:cast-audio
  mode: parallel
  fields:
    target:
      description: "Enter the targets in case they are not clear from the service calls"
      required: false
      selector:
        target:
          entity:
            integration: cast
            domain: media_player
          device:
            integration: cast
    action:
      description: "Actions to be performed (only service calls will work)"
      required: true
      selector:
        action:
    resume_this_action:
      description: "Set to false if you don't want to resume the actions started with this script (default is true)"
      required: false
      selector:
        boolean:
  variables:
    players_screen:
      - media_player.keuken_hub
      - media_player.slaapkamer_hub
      - media_player.shield
    primary_spotcast: "arnoud_buurman"
    fixed_picture:
      NPO Radio 2: "http://192.168.2.3:8123/local/pictures/radio/npo_radio_2.png"
      Radio Veronica: "http://192.168.2.3:8123/local/pictures/radio/radio_veronica.png"
    speaker_groups:
      media_player.speakers:
        - media_player.huiskamer_speaker
        - media_player.slaapkamer_speaker
        - media_player.studeerkamer_speaker
      media_player.speakerfancy:
        - media_player.slaapkamer_speaker
        - media_player.studeerkamer_speaker
        - media_player.ht_nt5
    default_volume_level: 0.25

  sequence:
    - alias: "Version number"
      variables:
        version: 1.7.2
    - alias: "Are there Spotify entities?"
      choose:
        - conditions: "{{ integration_entities('spotify') | count > 0 }}"
          sequence:
            - alias: "Update Spotify entities"
              service: homeassistant.update_entity
              target:
                entity_id: "{{ integration_entities('spotify') }}"
    - alias: "Failsafe to remove all groups if the script was not running"
      choose:
        - conditions: >
            {{ 
              state_attr(this.entity_id, 'current') == 1
              and integration_entities('group')
                    | select('search', 'ghresume')
                    | list | count > 0
            }}
          sequence:
            - alias: "Which groups to remove"
              variables:
                groups_existing: >
                  {{ 
                    integration_entities('group')
                      | select('search', 'ghresume')
                      | list
                  }}
            - alias: "Loop to remove groups"
              repeat:
                count: "{{ groups_existing | count }}"
                sequence:
                  - alias: "Remove one group"
                    service: group.remove
                    data:
                      object_id: >
                        {{ states[groups_existing[repeat.index -1]].object_id }}
    - alias: "Set variables to be used in the script"
      variables:
        start_time: "{{ now() }}"
        event_script: "{{ event_script if event_script is defined else false }}"
        speaker_group_list: "{{ speaker_groups.keys() | list if (speaker_groups is defined and speaker_groups) else [] }}"
        service_calls: >
          {%- set ns = namespace(service = []) %}
          {%- for item in action %}
            {%- if item.get('service', 'uhoh') != 'uhoh' %}
              {%- set ns.service = ns.service + [ item ] %}
            {%- endif %}
          {%- endfor %}
          {{ ns.service }}
        no_service_count: >
          {{ action | reject('in', service_calls) | list | count }}
        target_list: >
          {%- if target_list is defined %}
            {{ target_list }}
          {%- else %}
            {# determine entities of cast integraton #}
              {%- set cast_entities = integration_entities('cast') %}
            {# create target lists #}
            {%- if target is defined %}
              {# create lists based on target input #}
                {%- set area_list = target.area_id.replace(' ' , '').split(',') if target.area_id is string else target.area_id %}
                {%- set device_list = target.device_id.replace(' ' , '').split(',') if target.device_id is string else target.device_id %}
                {%- set entity_list = target.entity_id.replace(' ' , '').split(',') if target.entity_id is string else target.entity_id %}
            {%- endif %}
            {# determine targets based on actions #}
              {%- set ns = namespace(entity = [], device = [], area = [] ) %}
              {%- for item in service_calls %}
                {%- set entity_s = item.get('entity_id', []) %}
                {%- set device_s = item.get('device_id', []) %}
                {%- set area_s = item.get('area_id', []) %}
                {%- if item.target is defined %}
                  {%- set entity = item.target.get('entity_id', []) %}
                  {%- set entity = entity.replace(' ','').split(',') if entity is string else entity %}
                  {%- set device = item.target.get('device_id', []) %}
                  {%- set device = device.replace(' ','').split(',') if device is string else device %}
                  {%- set area = item.target.get('area_id', []) %}
                  {%- set area = area.replace(' ','').split(',') if area is string else area %}
                {%- else %}
                  {%- if item.data is defined %}
                    {%- set entity_d = item.data.get('entity_id', []) %}
                    {%- set entity_d = entity_d.replace(' ','').split(',') if entity_d is string else entity_d %}
                    {%- set device_d = item.data.get('device_id', []) %}
                    {%- set device_d = device_d.replace(' ','').split(',') if device_d is string else device_d %}
                    {%- set area_d = item.data.get('area_id', []) %}
                    {%- set area_d = area_d.replace(' ','').split(',') if area_d is string else area_d %}
                  {%- endif %}
                  {%- set entity = item.get('entity_id', []) %}
                  {%- set entity = entity.replace(' ','').split(',') if entity is string else entity %}
                  {%- set entity = entity + (entity_d if entity_d is defined else []) %}
                  {%- set device = item.get('device_id', []) %}
                  {%- set device = device.replace(' ','').split(',') if device is string else device %}
                  {%- set device = device + (device_d if device_d is defined else []) %}
                  {%- set area = item.get('area_id', []) %}
                  {%- set area = area.replace(' ','').split(',') if area is string else area %}
                  {%- set area = area + (area_d if area_d is defined else []) %}
                {%- endif %}
                  {%- set ns.entity = entity + ns.entity %}
                  {%- set ns.device = device + ns.device%}
                  {%- set ns.area = area + ns.area %}
              {%- endfor %}
              {%- set area_list = ns.area + (area_list if area_list is defined else []) %}
              {%- set device_list = ns.device + (device_list if device_list is defined else []) %}
              {%- set entity_list = ns.entity + (entity_list if entity_list is defined else []) %}
            {# create entity list based on device/area input #}
              {# determine cast entities of areas #}
                {%- set ns = namespace(area_cast = []) %}
                {%- for area in area_list %}
                  {%- set ns.area_cast = ns.area_cast + area_entities(area) | select('in', cast_entities) | list %}
                {%- endfor %}
                {%- set area_cast = ns.area_cast %}
              {# determine cast entities of devices #}
                {%- set ns = namespace(device_cast = []) %}
                {%- for device in device_list %}
                  {%- set ns.device_cast = ns.device_cast + device_entities(device) | select('in', cast_entities) | list %}
                {%- endfor %}
                {%- set device_cast = ns.device_cast %}
              {# determine cast entities of all entities #}
                {%- set entity_cast = entity_list | select('in', cast_entities) | list %}
            {# create list with all entities #}
              {%- set total_list = (area_cast + device_cast + entity_cast) | unique | list %}
            {# avoid to target both complete speaker groups and single members #}
              {%- set target_group =  total_list | select('in', speaker_group_list) | list %}
              {%- set target_single = total_list | reject('in', speaker_group_list) | list %}
              {%- set ns = namespace(groupmembers = []) %}
              {%- for group in target_group %}
                {%- set ns.groupmembers = ns.groupmembers + speaker_groups[group] %}
              {%- endfor %}
              {%- 
                set single_not_in_group = target_single 
                  | reject('in', ns.groupmembers | unique | list)
                  | list
              %}
              {{ target_group + single_not_in_group }}
          {%- endif %}
        player_data: >
          {%- if player_data is defined %}
            {{ player_data }}
          {%- else %}
            {%- set ns = namespace(info=[]) %}
            {%- for entity in expand(integration_entities('cast')) %}
                {%- set general = dict(
                                        data_source = 'resume_script',
                                        entity_id = entity.entity_id,
                                        state = entity.state
                                        )
                %}
                {%- if entity.attributes.app_name == 'Spotify' %}
                  {%- set additional = dict(
                                            app_name = 'Spotify',
                                            volume_level = entity.attributes.volume_level,
                                            media_position =  as_timestamp(now()) | round(2)
                                                              - as_timestamp(entity.attributes.get('media_position_updated_at', now())) | round(2) 
                                                              + entity.attributes.get('media_position', 0)
                                            )
                  %}
                {%- elif entity.attributes.app_name in ['YouTube', 'YouTube Music'] %}
                  {%- set additional = dict(
                                            app_name = entity.attributes.app_name,
                                            volume_level = entity.attributes.volume_level,
                                            media_content_id = entity.attributes.get('media_content_id', 'no media_content'),
                                            media_position =  as_timestamp(now()) | round(2)
                                                              - as_timestamp(entity.attributes.get('media_position_updated_at', now())) | round(2) 
                                                              + entity.attributes.get('media_position', 0)
                                            )
                  %}
                {%- elif entity.state == 'playing' %}
                  {%- set additional = dict(
                                            app_name = entity.attributes.app_name,
                                            volume_level = entity.attributes.volume_level,
                                            media_content_id = entity.attributes.get('media_content_id', 'no media_content'),
                                            media_title = entity.attributes.get('media_title', 'no title'),
                                            media_artist = entity.attributes.get('media_artist', 'no artist'),
                                            media_content_type = entity.attributes.get('media_content_type', 'no type'),
                                            entity_picture = entity.attributes.get('entity_picture', 'no pic'),
                                            media_position =  as_timestamp(now()) | round(2)
                                                              - as_timestamp(entity.attributes.get('media_position_updated_at', now())) | round(2) 
                                                              + entity.attributes.get('media_position', 0)
                                            )
                  %}
                {%- endif %}
              {% set ns.info = ns.info + [ dict(general, **additional) if additional is defined else general ] %}
            {%- endfor %}
            {{ ns.info }}
          {%- endif %}
        players_to_resume: >
          {%- if players_to_resume is defined %}
            {%- set groups = players_to_resume | select('in', speaker_group_list) | list %}
            {%- set ns = namespace(members = []) %}
              {%- for group in groups %}
                {%- set ns.members = ns.members + speaker_groups[group] %}
              {%- endfor %}
            {{ players_to_resume | reject('in', ns.members) | list }}
          {%- else %}
            {# set variables based on dynamic groups created by script #}
              {%- set groups_resume_active = integration_entities('group')
                                              | select('search', 'group.resume_active_ghresume')
                                              | list 
              %}
              {%- set resume_active = expand(groups_resume_active) | map(attribute='entity_id') | list %}
              {%- set groups_resume_false = integration_entities('group')
                                              | select('search', 'group.resume_action_false_ghresume')
                                              | list
              %}
              {%- set resume_action_false = expand(groups_resume_false) | map(attribute='entity_id') | list %}
            {# determine which media_players are playing and store attributes#}
              {%- 
                set all_players_playing = player_data
                                            | selectattr('state', 'eq', 'playing') 
                                            | map(attribute='entity_id') 
                                            | list  
              %}
            {# determine which Google Home speakers groups are playing #}
              {%- 
                set all_speaker_groups_playing = all_players_playing
                                                    | select('in', speaker_group_list)
                                                    | list
              %}
            {# determine members of playing speaker groups for rare cases where they are not shown as playing #}
              {%- set ns = namespace(members_playing = []) %}
                {%- for group in all_speaker_groups_playing %}
                  {%- set ns.members_playing = ns.members_playing + speaker_groups[group] %}
                {%- endfor %}
              {%- set all_players_playing = all_players_playing + ns.members_playing | unique | list %}
            {# determine which of the targets (including groups members) are playing #}
              {%- set ns = namespace(targets = []) %}
                {%- for target in target_list %}
                  {%- set ns.targets = ns.targets +  (
                                                        (speaker_groups[target] + [target])
                                                        if target in speaker_group_list
                                                        else [ target ]
                                                      )
                  %}
                {%- endfor %}
              {%- set target_playing = ns.targets | select('in', all_players_playing) | list %}
            {# determine which groups should be resumed becaue a single target is part of that group #}
              {%- set ns = namespace(groups = []) %}
                {%- for group in all_speaker_groups_playing %}
                  {%- for entity in speaker_groups[group] if entity in target_playing %}
                    {%- set ns.groups = ns.groups + [group] %}
                  {%- endfor %}
                {%- endfor %}
              {%- set speaker_groups_resume = ns.groups | unique | list %}
            {# determine which single entities are in a group which is going to be resumed #}
              {%- set ns = namespace(to_reject = []) %}
              {%- for group in speaker_groups_resume %}
                {%- set ns.to_reject = ns.to_reject + speaker_groups[group] %}
              {%- endfor %}
              {%- set reject_list = ns.to_reject %}
            {# determine which single playing entities are in a group which is a target #}
              {%- set target_group = target_list | select('in', speaker_group_list) | reject('in', all_speaker_groups_playing) |list %}
              {%- set ns = namespace(single_resume = []) %}
              {%- for group in target_group %}
                {%- set ns.single_resume = ns.single_resume + speaker_groups[group] | select('in', all_players_playing) | list %}
              {%- endfor %}
              {%- set single_resume_list = ns.single_resume %}
            {# combine all the above to a list of players which should be resumed #}
              {{ 
                (target_playing + speaker_groups_resume + single_resume_list)
                  | reject('in', reject_list)
                  | reject('in', resume_active)
                  | reject('in', resume_action_false)
                  | unique
                  | list
              }}
            {%- endif %}
        spotify_data: >
          {%- if spotify_data is defined %}
            {{ spotify_data }}
          {%- else %}
            {%- set entities = expand(integration_entities('spotify'))
                                | selectattr('state', 'eq', 'playing')
            %}
            {%- set ns = namespace(info=[]) %}
            {%- for entity in entities %}
              {%- set ns.info = ns.info + [ dict(entity_id=entity.entity_id, source=entity.attributes.source) ] %}
            {%- endfor %}
            {{ ns.info }}
          {%- endif %}
        ytube_music_data: >
          {%- if ytube_music_data is defined %}
            {{ ytube_music_data }}
          {%- else %}
            {%- set ns = namespace(ytube = []) %}
            {%- for item in expand(integration_entities('ytube_music_player'))
                            | selectattr('state', 'eq', 'playing')
            %}
              {%- set ns.ytube = ns.ytube + [
                                              dict(
                                                    player = item.entity_id,
                                                    target = item.attributes.remote_player_id,
                                                    position = (
                                                                  time - item.attributes.get('media_position_updated_at', time)
                                                                  + timedelta(seconds=item.attributes.get('media_position', 0))
                                                                ).seconds
                                                  )
                                            ]
              %}
            {%- endfor %}
            {{ ns.ytube }}
          {%- endif %}
    - alias: "Resume ytube players which are not a target in case voice script is used"
      choose:
        - conditions: >
            {{
              ytube_music_data
                | rejectattr('target', 'in', players_to_resume)
                | list
                | count > 0
              and ytube_music_data[0].data_source == 'voice_script'
            }}
          sequence:
            - variables:
                player_ytube: >
                  {{
                    ytube_music_data
                              | rejectattr('target', 'in', players_to_resume)
                              | map(attribute='player')
                              | list
                  }}
                target_ytube: >
                  {%- set y = ytube_music_data
                              | rejectattr('target', 'in', players_to_resume)
                              | map(attribute='target')
                              | list
                  %}
                  {%- set ns = namespace(members = []) %}
                  {%- for target in y %}
                    {%- if target in speaker_group_list %}
                      {%- set ns.members = ns.members + speaker_groups[target] %}
                    {%- endif %}
                  {%- endfor %}
                  {{ (y + ns.members) | reject('in', speaker_group_list) | unique | list }}
            - service: ytube_music_player.call_method
              data:
                entity_id: "{{ player_ytube }}"
                command: interrupt_resume
            - alias: "Set right position for ytube_music"
              repeat:
                count: "{{ player_ytube | count }}"
                sequence:
                  - variables:
                      player: "{{ ytube_music_data | selectattr('player', 'eq', player_ytube[repeat.index-1]) | join }}"
                  - service: script.turn_on
                    target:
                      entity_id: script.google_home_resume_ytube_seek
                    data:
                      variables:
                        player_data: "{{ player_data }}"
                        player: "{{ player }}"
                        target_ytube: "{{ target_ytube }}"
    - alias: "Send log message about wrong actions"
      choose:
        - conditions: "{{ (not event_script) and (service_calls | count == 0 or no_service_count > 0) }}"
          sequence:
            service: system_log.write
            data:
              level: "{{ iif(service_calls | count == 0, 'error', 'warning') }}"
              logger: "{{ this.entity_id }}"
              message: >
                {%- if service_calls | count == 0 %}
                  There were no service calls defined, no actions are performed.
                  The {{ this.attributes.friendly_name }} script has been aborted
                {%- elif no_service_count == 1 %}
                  You added an action which is not a service call to the 
                  {{ this.attributes.friendly_name }} script. This action was ignored.
                {%- else %}
                  You added {{ no_service_count }} actions which are not service calls 
                  to the {{ this.attributes.friendly_name }} script. These were ignored.
                {%- endif %}
    - alias: "Are there any service calls to perform, otherwise stop script"
      condition: template
      value_template: "{{ event_script or service_calls | count != 0 }}"
    - variables:
        player_data_enriched: >
          {%- set ns = namespace(info=[]) %}
          {%- for entity in player_data %}
            {%- set members = speaker_groups[entity.entity_id]
                              if speaker_groups is defined and entity.entity_id in speaker_group_list
                              else []
            %}
            {%- set screen = players_screen is defined and entity.entity_id in players_screen %}
            {%- set type = iif(members,'group',iif(screen,'screen','no screen')) %}
            {%- set additional =  dict(members = members, type = type) %}
            {%- if entity.app_name == 'Spotify' %}
              {%- set list_check = [ entity.entity_id ] + members %}
              {%- set names_check = expand(list_check) | map(attribute='name') | list %}
              {%- set spotcast = spotify_data
                                  | selectattr('source', 'in', names_check)
                                  | map(attribute='entity_id')
                                  | join
                                  | replace('media_player.spotify_', '')
              %}
              {% set spotcast = iif(spotcast, spotcast, primary_spotcast) %}
              {% set spotcast = iif(spotcast == primary_spotcast, 'primary_account', spotcast) %}
              {%- set add_spotcast =  dict(spotcast = spotcast) %}
              {%- set additional = dict(additional, **add_spotcast) %}
            {%- elif entity.state == 'playing'
                      and fixed_picture is defined
                      and iif(fixed_picture)
                      and entity.media_artist in fixed_picture.keys() | list
            %}
              {%- set add_picture = dict(fixed_picture = fixed_picture[entity.media_artist]) %}
              {%- set additional = dict(additional, **add_picture) %}
            {%- elif entity.state == 'off' %}
              {%- set volume = state_attr(entity.entity_id, 'volume_level') %}
              {%- set volume = volume if volume | is_number else default_volume_level %}
              {%- set add_volume = dict(volume_level = volume) %}
              {%- set additional = dict(additional, **add_volume) %}
            {%- endif %}
            {%- set ns.info = ns.info + [ dict(entity, **additional) ] %}
          {%- endfor %}
          {{ ns.info }}
        target_not_playing: >
          {%- 
            set playing = player_data
              | selectattr('state', 'eq', 'playing')
              | map(attribute='entity_id')
              | list 
          %}
          {%- set ns = namespace(members=[]) %}
          {%- for player in player_data %}
            {%- if player.entity_id in target_list and player.type == 'group' %}
              {% set ns.members = ns.members + player.members %}
            {%- endif %}
          {%- endfor %}
          {{ 
            (target_list + ns.members) 
              | reject('in', speaker_group_list + playing) 
              | list 
          }}
    - alias: "Create group with entities for which the script is active"
      service: group.set
      data:
        object_id: resume_script_active_ghresume_{{ context.id }}
        name: "Entities currently active with Google Home Resume script"
        icon: mdi:play-box
        entities: "{{ players_to_resume + target_not_playing }}"
    - alias: "Create group for entities which will be resumed"
      service: group.set
      data:
        object_id: resume_active_ghresume_{{ context.id }}
        name: "Add ytube music players which will be resumed to resume active group"
        icon: mdi:autorenew
        entities: >
          {{ ytube_music_data
              | selectattr('target', 'in', players_to_resume)
              | map(attribute='player')
              | list
          }}
    - alias: "Create group for resume_this_action setting"
      choose:
        - conditions: "{{ iif(resume_this_action is defined and resume_this_action,false,true) }}"
          sequence:
            - alias: "Create group entities with resume_this_action to false"
              service: group.set
              data:
                object_id: resume_action_false_ghresume_{{ context.id }}
                name: "Entities with actions which should not be resumed"
                icon: mdi:alert-octagon
                entities: "{{ players_to_resume + target_not_playing }}"
    - alias: "Turn non playing entities on if needed"
      choose:
        - conditions: >
            {% set vol_unknown = player_data
                    | selectattr('volume_level', 'eq', 'no volume')
                    | map(attribute='entity_id')
                    | list
            %}
            {{ target_not_playing | select('in', vol_unknown) | list | count > 0 }}
          sequence:
            - alias: "Turn non playing entities on"
              service: media_player.turn_on
              target:
                entity_id: >
                  {{ target_not_playing }}
            - delay: 0.25
    - alias: "Interrupt YouTube music if needed"
      choose:
        - conditions:
            - alias: "Anything playing"
              condition: template
              value_template: "{{ ytube_music_data | count > 0 }}"
          sequence:
            - service: ytube_music_player.call_method
              data:
                entity_id: >
                  {{
                    ytube_music_data
                              | rejectattr('target', 'in', players_to_resume)
                              | map(attribute='player')
                              | list
                  }}
                command: interrupt_start
    - alias: "Perform service calls defined in action"
      repeat:
        count: "{{ service_calls | count }}"
        sequence:
          - service: "{{ service_calls[repeat.index -1].service }}"
            target: "{{ service_calls[repeat.index -1].get('target', {}) }}"
            data: "{{ service_calls[repeat.index -1].get('data', {}) }}"
    - alias: "Short delay"
      delay: "{{ 0 if event_script else 4 }}"
    - alias: "Anything to resume?"
      choose:
        - conditions:
            - alias: "Anything playing"
              condition: template
              value_template: "{{ players_to_resume | count > 0 }}"
          sequence:
            - alias: "Resume players"
              repeat:
                count: "{{ players_to_resume | count }}"
                sequence:
                  - alias: "Variables for specific media_player"
                    variables:
                      player: >
                        {{
                          player_data_enriched
                            | selectattr('entity_id', 'eq', players_to_resume[repeat.index - 1])
                            | join
                        }}
                  - alias: "Start perform resume script"
                    service: script.turn_on
                    target:
                      entity_id: script.google_home_resume_perform_resume
                    data:
                      variables:
                        start_time: "{{ start_time }}"
                        player: "{{ player }}"
                        member_data: "{{ player_data_enriched | selectattr('entity_id', 'in', player.members) | list }}"
                        ytube_music_data: "{{ ytube_music_data }}"
                        players_to_resume: "{{ players_to_resume }}"
                        event_script: "{{ event_script }}"
    - alias: "Resume ytube players which are a target"
      choose:
        - conditions: >
            {{ 
              (
                ytube_music_data
                  | selectattr('target', 'in', players_to_resume)
                  | list
                  | count > 0
              )
            }}
          sequence:
            - variables:
                player_ytube: >
                  {{
                    ytube_music_data
                              | rejectattr('target', 'in', players_to_resume)
                              | map(attribute='player')
                              | list
                  }}
                target_ytube: >
                  {%- set y = ytube_music_data
                              | rejectattr('target', 'in', players_to_resume)
                              | map(attribute='target')
                              | list
                  %}
                  {%- set ns = namespace(members = []) %}
                  {%- for target in y %}
                    {%- if target in speaker_group_list %}
                      {%- set ns.members = ns.members + speaker_groups[target] %}
                    {%- endif %}
                  {%- endfor %}
                  {{ (y + ns.members) | reject('in', speaker_group_list) | unique | list }}
            - service: ytube_music_player.call_method
              data:
                entity_id: "{{ player_ytube }}"
                command: interrupt_resume
            - alias: "Set right position for ytube_music"
              repeat:
                count: "{{ player_ytube | count }}"
                sequence:
                  - variables:
                      player: "{{ ytube_music_data | selectattr('player', 'eq', player_ytube[repeat.index-1]) | join }}"
                  - service: script.turn_on
                    target:
                      entity_id: script.google_home_resume_ytube_seek
                    data:
                      variables:
                        player_data: "{{ player_data_enriched }}"
                        player: "{{ player }}"
                        target_ytube: "{{ target_ytube }}"
            - alias: "Remove entity from group"
              service: group.set
              data:
                object_id: resume_active_ghresume_{{ context.id }}
                name: "Entities currently active with Google Home Resume script"
                icon: mdi:autorenew
                entities: >
                  {%- set current = state_attr('group.resume_active', 'entity_id') %}
                  {{ iif(current == none, [], current) | reject('in', player_ytube) | list }}
    - alias: "Restore volume and backdrop of non playing entities"
      choose:
        - conditions:
            - alias: "Restore required?"
              condition: template
              value_template: "{{ target_not_playing | count > 0 }}"
          sequence:
            - repeat:
                count: "{{ target_not_playing | count }}"
                sequence:
                  - variables:
                      player: >
                        {{
                          player_data_enriched 
                            | selectattr('entity_id', 'eq', target_not_playing[repeat.index-1])
                            | join
                        }}
                  - service: script.turn_on
                    target:
                      entity_id: script.google_home_resume_restore_non_playing
                    data:
                      variables:
                        player: "{{ player }}"
                        member_data: "{{ player_data_enriched | selectattr('entity_id', 'in', player.members) | list }}"
    - alias: "Create variable for existing groups"
      variables:
        groups_to_remove: >
          {% set groups = integration_entities('group')
                            | select('search', 'ghresume')
                            | list 
          %}
          {{ groups if state_attr(this.entity_id, 'current') == 1 else groups | select('search', context.id) | list }}
    - alias: "Wait until helper scripts are finished"
      wait_template: >
        {{ 
          states.script | selectattr('entity_id', 'search', 'script.google_home_resume_') 
                        | map(attribute='attributes.current') 
                        | sum == 0
        }}
    - alias: "Remove groups"
      repeat:
        count: "{{ groups_to_remove | count }}"
        sequence:
          - alias: "Remove group"
            service: group.remove
            data:
              object_id: >
                {{ states[groups_to_remove[repeat.index -1]].object_id }}

# GOOGLE HOME RESUME PERFORM RESUME

google_home_resume_perform_resume:
  alias: "00 ğŸ”Š Google Home Resume - Perform resume"
  description: Helper script to perform the resume for the Google Home Resume script
  icon: mdi:cast-audio
  mode: parallel
  max: 20
  sequence:
    - alias: "Set variables"
      variables:
        spotify: >
          {{ player.app_name == 'Spotify' }}
        youtube: >
          {{ player.app_name in ['YouTube', 'YouTube Music'] }}
        stream: >
          {%- set y = ytube_music_data
                      | rejectattr('target', 'in', players_to_resume)
                      | map(attribute='target')
                      | list
          %}
          {{
            player.media_content_id is defined
            and player.media_content_id.startswith('http')
            and not player.entity_id in y
          }}
    - alias: "Add entity to the resume active group"
      service: group.set
      data:
        object_id: resume_active_ghresume_{{ context.id }}
        name: "Entities which will be resumed by the Google Home Resume script"
        icon: mdi:autorenew
        entities: >
          {%- set current = state_attr('group.resume_active', 'entity_id') %}
          {%- set current = [] if current == none else current | list %}
          {{ 
              ( current + [ player.entity_id ] ) | unique | list
          }}
    - alias: "Resume needed?"
      choose:
        - conditions:
            - alias: "State changed since script started?"
              condition: template
              value_template: "{{ event_script or (states[player.entity_id].last_changed > as_datetime(start_time) if start_time is defined else true) }}"
          sequence:
            - alias: "Wait until player is idle again, and all other scripts are finished"
              wait_template: >
                {%- set current = expand(states.group
                                    | selectattr('entity_id', 'search', 'group.resume_script_target_')
                                    | rejectattr('entity_id', 'search', context)
                                    | map(attribute='entity_id')
                                    | list) | map(attribute='entity_id') | list
                %}
                {{
                  states(player.entity_id) in ['idle', 'off']
                  and current | select('eq', player.entity_id) | list | count == 0
                }}
            - alias: "Set volume to old volume if needed"
              choose:
                - conditions:
                    - alias: "Volume restore needed"
                      condition: template
                      value_template: >
                        {{
                          player.volume_level | round(2, default=0)
                          != state_attr(player.entity_id, 'volume_level') | round(2, default=0)
                        }}
                  sequence:
                    - alias: "Player is group?"
                      choose:
                        - conditions: "{{ player.type == 'group' }}"
                          sequence:
                            - alias: "Restore volume of members"
                              repeat:
                                count: "{{ player.members | count }}"
                                sequence:
                                  - alias: "Set volume back to old state"
                                    service: media_player.volume_set
                                    target:
                                      entity_id: "{{ player.members[repeat.index -1] }}"
                                    data:
                                      volume_level: >
                                        {{
                                          member_data
                                            | selectattr('entity_id', 'eq', player.members[repeat.index-1])
                                            | map(attribute='volume_level')
                                            | join
                                        }}
                      default:
                        - alias: "Set volume back to old state"
                          service: media_player.volume_set
                          target:
                            entity_id: "{{ player.entity_id }}"
                          data:
                            volume_level: "{{ player.volume_level }}"
            - alias: "Resume playing"
              choose:
                - alias: "YouTube?"
                  conditions: "{{ player.type == 'screen' and youtube }}"
                  sequence:
                    - alias: "Play video"
                      service: media_player.play_media
                      target:
                        entity_id: "{{ player.entity_id }}"
                      data:
                        media_content_type: cast
                        media_content_id: '
                          {
                          "app_name": "youtube",
                          "media_id": "{{ player.media_content_id }}"
                          }'
                    - alias: "Wait until video is playing"
                      wait_template: >
                        {{
                          is_state_attr(player.entity_id, 'media_content_id', player.media_content_id)
                          and iif(state_attr(player.entity_id, 'media_position'))
                        }}
                    - alias: "Seek"
                      service: media_player.media_seek
                      target:
                        entity_id: "{{ player.entity_id }}"
                      data:
                        seek_position: >
                          {{ [0, player.media_position - 3] | max }}
                - alias: "Spotify?"
                  conditions: "{{ spotify }}"
                  sequence:
                    - alias: "Primary spotcast account?"
                      choose:
                        - conditions: "{{ player.spotcast == 'primary_account' }}"
                          sequence:
                            - alias: "Resume spotify with primary spotcast account"
                              service: spotcast.start
                              data:
                                entity_id: "{{ player.entity_id }}"
                                force_playback: true
                      default:
                        - alias: "Resume spotify with specific account"
                          service: spotcast.start
                          data:
                            entity_id: "{{ player.entity_id }}"
                            account: "{{ player.spotcast }}"
                            force_playback: true
                - alias: "Stream?"
                  conditions: "{{ stream }}"
                  sequence:
                    - variables:
                        picture_url: "{{ player.fixed_picture if player.fixed_picture is defined else player.entity_picture }}"
                        metadata:
                          metadataType: 3
                          title: "{{ player.media_title }}"
                          artist: "{{ player.media_artist }}"
                        picture:
                          images:
                            - url: "{{ picture_url }}"
                    - alias: "Resume stream"
                      service: media_player.play_media
                      target:
                        entity_id: "{{ player.entity_id }}"
                      data:
                        media_content_id: "{{ player.media_content_id }}"
                        media_content_type: "{{ player.media_content_type }}"
                        extra:
                          metadata: >
                            {{ medadata if picture_url == 'no pic' else dict(metadata, **picture) }}
    - alias: "Check if resume_action_false group exists"
      choose:
        - conditions: >
            {{ 
              integration_entities('group') 
                | select('search', 'resume_action_false_ghresume_' ~ context.id)
                | list 
                | count > 0 
            }}
          sequence:
            - alias: "Remove entity from group"
              service: group.set
              data:
                object_id: resume_action_false_ghresume_{{ context.id }}
                name: "Entities with actions which should not be resumed"
                icon: mdi:alert-octagon
                entities: >
                  {%- set current = state_attr('group.resume_action_false_ghresume' ~ context.id, 'entity_id') %}
                  {{ iif(current == none, [], current) | reject('eq', player.entity_id) | list }}
    - alias: "Remove entity from group"
      service: group.set
      data:
        object_id: resume_active_ghresume_{{ context.id }}
        name: "Entities currently active with Google Home Resume script"
        icon: mdi:autorenew
        entities: >
          {%- set current = state_attr('group.resume_active', 'entity_id') %}
          {{ iif(current == none, [], current) | reject('eq', player.entity_id) | list }}
    - alias: "Check if resume_script_active group exists"
      choose:
        - conditions: >
            {{ 
              integration_entities('group') 
                | select('search', 'resume_script_active_ghresume_' ~ context.id)
                | list 
                | count > 0 
            }}
          sequence:
            - alias: "Remove entity from group"
              service: group.set
              data:
                object_id: resume_script_active_ghresume_{{ context.id }}
                name: "Entities currently active with Google Home Resume script"
                icon: mdi:play-box
                entities: >
                  {%- set current = state_attr('group.resume_active_ghresume' ~ context.id, 'entity_id') %}
                  {{ iif(current == none, [], current) | reject('eq', player.entity_id) | list }}

# GOOGLE HOME RESUME RESTORE NON PLAYING

google_home_resume_restore_non_playing:
  alias: "00 ğŸ”Š Google Home Resume - Restore non playing"
  description: Helper script to restore non playing entities for the Google Home Resume script
  icon: mdi:cast-audio
  mode: parallel
  sequence:
    - alias: "Wait until entity is idle or off"
      wait_template: "{{ states(player.entity_id) in ['idle', 'off'] }}"
    - alias: "Google Home with screen back to idle screen"
      choose:
        - conditions: "{{ player.type == 'screen' }}"
          sequence:
            - alias: "Turn Google Home off to return to idle mode (photo display)"
              service: media_player.turn_off
              target:
                entity_id: "{{ player.entity_id }}"
    - alias: "Set volume to old volume if needed"
      choose:
        - conditions:
            - alias: "Volume restore needed"
              condition: template
              value_template: >
                {{
                  player.volume_level | round(2, default=0)
                  != state_attr(player.entity_id, 'volume_level') | round(2, default=0)
                }}
          sequence:
            - alias: "Player is group?"
              choose:
                - conditions: "{{ player.type == 'group' }}"
                  sequence:
                    - alias: "Restore volume of members"
                      repeat:
                        count: "{{ player.members | count }}"
                        sequence:
                          - alias: "Set volume back to old state"
                            service: media_player.volume_set
                            target:
                              entity_id: "{{ player.members[repeat.index -1] }}"
                            data:
                              volume_level: >
                                {{
                                  member_data
                                    | selectattr('entity_id', 'eq', player.members[repeat.index-1])
                                    | map(attribute='volume_level')
                                    | join
                                }}
              default:
                - alias: "Set volume back to old state"
                  service: media_player.volume_set
                  target:
                    entity_id: "{{ player.entity_id }}"
                  data:
                    volume_level: "{{ player.volume_level }}"
    - alias: "Check if resume_action_false group exists"
      choose:
        - conditions: >
            {{ 
              integration_entities('group') 
                | select('search', 'resume_action_false_ghresume' ~ context.id)
                | list 
                | count > 0 
            }}
          sequence:
            - alias: "Remove entity from group"
              service: group.set
              data:
                object_id: resume_action_false_ghresume_{{ context.id }}
                name: "Entities with actions which should not be resumed"
                icon: mdi:alert-octagon
                entities: >
                  {%- set current = state_attr('resume_action_false_ghresume_' ~ context.id, 'entity_id') %}
                  {{ iif(current == none, [], current) | reject('eq', player.entity_id) | list }}
    - alias: "Remove entity from group"
      service: group.set
      data:
        object_id: resume_active_ghresume_{{ context.id }}
        name: "Entities currently active with Google Home Resume script"
        icon: mdi:autorenew
        entities: >
          {%- set current = state_attr('group.resume_active', 'entity_id') %}
          {{ iif(current == none, [], current) | reject('eq', player.entity_id) | list }}
    - alias: "Remove entity from group"
      service: group.set
      data:
        object_id: resume_script_active_ghresume_{{ context.id }}
        name: "Entities currently active with Google Home Resume script"
        icon: mdi:play-box
        entities: >
          {%- set current = state_attr('group.resume_active', 'entity_id') %}
          {{ iif(current == none, [], current) | reject('eq', player.entity_id) | list }}

# GOOGLE HOME RESUME YTUBE SEEK

google_home_resume_ytube_seek:
  alias: "00 ğŸ”Š Google Home Resume - Ytube seek"
  description: Helper script for the Google Home Resume script to set ytube music position
  icon: mdi:cast-audio
  mode: parallel
  sequence:
    - alias: "Wait until song is playing"
      wait_template: >
        {{ 
          iif(state_attr(player.player, '_media_id'))
          and iif(state_attr(player.player, 'media_position')) 
        }}
    - alias: "Seek"
      service: media_player.media_seek
      target:
        entity_id: "{{ player.player }}"
      data:
        seek_position: >
          {{ player.position }}
    - alias: "Adjust volume"
      repeat:
        count: "{{ target_ytube | count }}"
        sequence:
          - variables:
              player: >
                {{ 
                  player_data_enriched
                    | selectattr('entity_id', 'eq', target_ytube[repeat.index - 1])
                    | join
                }}
          - alias: "Set volume back to old state"
            service: media_player.volume_set
            target:
              entity_id: "{{ player.entity_id }}"
            data:
              volume_level: "{{ player.volume_level }}"