#sensor:
#  - platform: p2000
#    name: Brandweer
#    regios: 10
#    disciplines: Brandweerdiensten
#    radius: 7500
#  - platform: p2000
#    name: Ambulance
#    regios: 10
#    disciplines: Ambulancediensten
#    radius: 1000
#  - platform: p2000
#    name: LL1
#    capcodes: 0120901
#  - platform: p2000
#    name: LL2
#    capcodes: 1420059
#  - platform: p2000
#    name: LL3
#    capcodes: 0923993
#  - platform: p2000
#    name: LL4
#    capcodes: 0320908
#  - platform: p2000
#    name: grip
#    radius: 30000
#    contains: "GRIP"
#  - platform: p2000
#    name: p2000_latest
#    regios: 10
#  - platform: rest
#    resource_template: https://geocode.search.hereapi.com/v1/geocode?q={{states('sensor.p2000_latest_location')|urlencode}}&apiKey={{states('input_text.here_api')}}
#    value_template: "{{(value_json['items'][0]['position']['lat']|string ) + ',' + (value_json['items'][0]['position']['lng'] |string)}}"
#    name: "p2000_latest_latlong"
#    json_attributes_path: "$.items[0].position"
#    json_attributes:
#      - lat
#      - lng

template:
  - trigger:
      - platform: event
        event_type: p2000_ambu
    sensor:
      - name: "P2000_last_ambu"
        unique_id: "e2e66563-ce45-47e5-92e9-f6666d50e50e"
        state: "{{states('sensor.p2000_latest')}}"
        icon: "mdi:ambulance"
        attributes:
          capcode: >
            {% if state_attr('sensor.p2000_latest', 'capcode') == None  %}
              {% if state_attr('sensor.p2000_latest', 'capcodes') == None %}
                Unknown
              {% else %}
                {{state_attr('sensor.p2000_latest', 'capcodes')}}
              {% endif %}
            {% else %}
              {{state_attr('sensor.p2000_latest', 'capcode')}}
            {% endif %}
          longitude: "{{state_attr('sensor.p2000_latest', 'longitude')}}"
          latitude:  "{{state_attr('sensor.p2000_latest', 'latitude')}}"
          distance: "{{state_attr('sensor.p2000_latest', 'distance')}}"
          regio: "{{state_attr('sensor.p2000_latest', 'regio')}}"
          "regio name": "{{state_attr('sensor.p2000_latest', 'regio name')}}"
          discipline: "{{state_attr('sensor.p2000_latest', 'discipline')}}"
          time: "{{state_attr('sensor.p2000_latest', 'time')}}"
          attribution: "{{state_attr('sensor.p2000_latest', 'attribution')}}"
          friendly_name: "Last announced P2000 Ambulance"
  - trigger:
      - platform: event
        event_type: p2000_bran
    sensor:
      - name: "P2000_last_bran"
        unique_id: "c32c1e61-b8e4-4bf9-8b97-1d5ce194a980"
        state: "{{states('sensor.p2000_latest')}}"
        icon: "mdi:fire-truck"
        attributes:
          capcode: >
            {% if state_attr('sensor.p2000_latest', 'capcode') == None  %}
              {% if state_attr('sensor.p2000_latest', 'capcodes') == None %}
                Unknown
              {% else %}
                {{state_attr('sensor.p2000_latest', 'capcodes')}}
              {% endif %}
            {% else %}
              {{state_attr('sensor.p2000_latest', 'capcode')}}
            {% endif %}
          longitude: "{{state_attr('sensor.p2000_latest', 'longitude')}}"
          latitude:  "{{state_attr('sensor.p2000_latest', 'latitude')}}"
          distance: "{{state_attr('sensor.p2000_latest', 'distance')}}"
          regio: "{{state_attr('sensor.p2000_latest', 'regio')}}"
          "regio name": "{{state_attr('sensor.p2000_latest', 'regio name')}}"
          discipline: "{{state_attr('sensor.p2000_latest', 'discipline')}}"
          time: "{{state_attr('sensor.p2000_latest', 'time')}}"
          attribution: "{{state_attr('sensor.p2000_latest', 'attribution')}}"
          friendly_name: "Last announced P2000 Firetruck"
  - trigger:
      - platform: event
        event_type: p2000_grip
    sensor:
      - name: "P2000_last_grip"
        unique_id: "3a2a46ab-b282-4325-838d-b1fe63871bc6"
        state: "{{states('sensor.p2000_latest')}}"
        icon: "mdi:alarm-light"
        attributes:
          capcode: >
            {% if state_attr('sensor.p2000_latest', 'capcode') == None  %}
              {% if state_attr('sensor.p2000_latest', 'capcodes') == None %}
                Unknown
              {% else %}
                {{state_attr('sensor.p2000_latest', 'capcodes')}}
              {% endif %}
            {% else %}
              {{state_attr('sensor.p2000_latest', 'capcode')}}
            {% endif %}
          longitude: "{{state_attr('sensor.p2000_latest', 'longitude')}}"
          latitude:  "{{state_attr('sensor.p2000_latest', 'latitude')}}"
          distance: "{{state_attr('sensor.p2000_latest', 'distance')}}"
          regio: "{{state_attr('sensor.p2000_latest', 'regio')}}"
          "regio name": "{{state_attr('sensor.p2000_latest', 'regio name')}}"
          discipline: "{{state_attr('sensor.p2000_latest', 'discipline')}}"
          time: "{{state_attr('sensor.p2000_latest', 'time')}}"
          attribution: "{{state_attr('sensor.p2000_latest', 'attribution')}}"
          friendly_name: "Last announced P2000 GRIP"
  - trigger:
      - platform: event
        event_type: p2000_heli
    sensor:
      - name: "P2000_last_heli"
        unique_id: "e6d9879f-070d-4c27-8b42-2c6b64b46500"
        state: >
            {% set map = {'sensor.ll1':'LL1','sensor.ll2':'LL2','sensor.ll3':'LL3','sensor.ll4':'LL4'} %}
            {% set heli = trigger.event.data.entity_id %}
            {{map.get(heli, 'unknown')}}: {{states(trigger.event.data.entity_id)}}
        icon: "mdi:alarm-light"
        attributes:
          capcode: >
            {% if state_attr(trigger.event.data.entity_id, 'capcode') == None  %}
              {% if state_attr(trigger.event.data.entity_id, 'capcodes') == None %}
                Unknown
              {% else %}
                {{state_attr(trigger.event.data.entity_id, 'capcodes')}}
              {% endif %}
            {% else %}
              {{state_attr(trigger.event.data.entity_id, 'capcode')}}
            {% endif %}
          longitude: "{{state_attr(trigger.event.data.entity_id, 'longitude')}}"
          latitude:  "{{state_attr(trigger.event.data.entity_id, 'latitude')}}"
          distance: "{{state_attr(trigger.event.data.entity_id, 'distance')}}"
          regio: "{{state_attr(trigger.event.data.entity_id, 'regio')}}"
          "regio name": "{{state_attr(trigger.event.data.entity_id, 'regio name')}}"
          discipline: "{{state_attr(trigger.event.data.entity_id, 'discipline')}}"
          time: "{{state_attr(trigger.event.data.entity_id, 'time')}}"
          attribution: "{{state_attr(trigger.event.data.entity_id, 'attribution')}}"
          friendly_name: "Last announced P2000 Heli"

  - sensor:
      - name: "p2000_last"
        unique_id: "8e9a755b-5522-42ab-980b-2b3e6d641311"
        state: >
          {% set capcodes = states.sensor|selectattr('attributes.capcodes', 'defined')|list %}
          {% set capcode = states.sensor|selectattr('attributes.capcode', 'defined')|list %}
          {% set entities = [ "sensor.p2000_latest", "sensor.ll3", "sensor.ll4", "sensor.ll1", "sensor.ll2" ]  %}
          {{ (capcode + capcodes)|sort(reverse=true,attribute='last_changed')|selectattr('entity_id', 'in',  entities)|map(attribute='state')|first}}
        icon: >
          {% set capcodes = states.sensor|selectattr('attributes.capcodes', 'defined')|list %}
          {% set capcode = states.sensor|selectattr('attributes.capcode', 'defined')|list %}
          {% set entities = [ "sensor.p2000_latest", "sensor.ll3", "sensor.ll4", "sensor.ll1", "sensor.ll2" ]  %}
          {% set entity = (capcode + capcodes)|sort(reverse=true,attribute='last_changed')|selectattr('entity_id', 'in',  entities)|map(attribute='entity_id')|first %}
          {% set ambu_string = '^(A|B|P |Prio |)([0-9]|) (( |)AMBU |)([0-9]{5} |[0-9]{2}mc[0-9]{3} |)' %}
          {% set brackets ='\([^)]+\) *' %}
          {% set mod_state = states(entity)| regex_replace(find=brackets, replace='', ignorecase=False) %}
          {% set roepnummer = mod_state | regex_findall_index(find=ambu_string, index=0, ignorecase=False)|last|trim %}
          {%- if entity == "sensor.p2000_latest"%}
            {%- if states('sensor.p2000_latest') is search('GRIP', ignorecase=true) %}
              {{'mdi:alarm-light'}}
            {%- elif is_state_attr(entity,'discipline','Ambulancediensten') %}
              {{'mdi:ambulance'}}
            {%- elif is_state_attr(entity,'discipline','Brandweerdiensten') %}
              {{'mdi:fire-truck'}}
            {% else %}
              {{'mdi:help'}}
            {%- endif %}
          {%- else %}
            {%- if roepnummer in ['13991','17992', ''] %}
              {{'mdi:helicopter'}}
            {%- else %}
              {{'mdi:ambulance'}}
            {%- endif %}
          {%- endif %}
        attributes:
          capcode: >
            {% set capcodes = states.sensor|selectattr('attributes.capcodes', 'defined')|list %}
            {% set capcode = states.sensor|selectattr('attributes.capcode', 'defined')|list %}
            {% set entities = [ "sensor.p2000_latest", "sensor.ll3", "sensor.ll4", "sensor.ll1", "sensor.ll2" ]  %}
            {% set entity = (capcode + capcodes)|sort(reverse=true,attribute='last_changed')|selectattr('entity_id', 'in',  entities)|map(attribute='entity_id')|first %}
            {% if state_attr(entity, 'capcode') == None  %}
              {% if state_attr(entity, 'capcodes') == None %}
                Unknown
              {% else %}
                {{state_attr(entity, 'capcodes')}}
              {% endif %}
            {% else %}
              {{state_attr(entity, 'capcode')}}
            {% endif %}
          longitude: >
            {% set capcodes = states.sensor|selectattr('attributes.capcodes', 'defined')|list %}
            {% set capcode = states.sensor|selectattr('attributes.capcode', 'defined')|list %}
            {% set entities = [ "sensor.p2000_latest", "sensor.ll3", "sensor.ll4", "sensor.ll1", "sensor.ll2" ]  %}
            {% set entity = (capcode + capcodes)|sort(reverse=true,attribute='last_changed')|selectattr('entity_id', 'in',  entities)|map(attribute='entity_id')|first %}
            {%- if state_attr(entity, 'longitude') == None  %}
              0
            {%- else %}
              {{state_attr(entity, 'longitude')}}
            {% endif %}
          latitude: >
            {% set capcodes = states.sensor|selectattr('attributes.capcodes', 'defined')|list %}
            {% set capcode = states.sensor|selectattr('attributes.capcode', 'defined')|list %}
            {% set entities = [ "sensor.p2000_latest", "sensor.ll3", "sensor.ll4", "sensor.ll1", "sensor.ll2" ]  %}
            {% set entity = (capcode + capcodes)|sort(reverse=true,attribute='last_changed')|selectattr('entity_id', 'in',  entities)|map(attribute='entity_id')|first %}
            {%- if state_attr(entity, 'latitude') == None  %}
              0
            {%- else %}
              {{state_attr(entity, 'latitude')}}
            {% endif %}
          distance: >
            {% set capcodes = states.sensor|selectattr('attributes.capcodes', 'defined')|list %}
            {% set capcode = states.sensor|selectattr('attributes.capcode', 'defined')|list %}
            {% set entities = [ "sensor.p2000_latest", "sensor.ll3", "sensor.ll4", "sensor.ll1", "sensor.ll2" ]  %}
            {% set entity = (capcode + capcodes)|sort(reverse=true,attribute='last_changed')|selectattr('entity_id', 'in',  entities)|map(attribute='entity_id')|first %}
            {%- if state_attr(entity, 'distance') == None  %}
              0
            {%- else %}
              {{state_attr(entity, 'distance')}}
            {% endif %}
          regio: >
            {% set capcodes = states.sensor|selectattr('attributes.capcodes', 'defined')|list %}
            {% set capcode = states.sensor|selectattr('attributes.capcode', 'defined')|list %}
            {% set entities = [ "sensor.p2000_latest", "sensor.ll3", "sensor.ll4", "sensor.ll1", "sensor.ll2" ]  %}
            {% set entity = (capcode + capcodes)|sort(reverse=true,attribute='last_changed')|selectattr('entity_id', 'in',  entities)|map(attribute='entity_id')|first %}
            {%- if state_attr(entity, 'regio') == None  %}
              0
            {%- else %}
              {{state_attr(entity, 'regio')}}
            {% endif %}
          "regio name": >
            {% set capcodes = states.sensor|selectattr('attributes.capcodes', 'defined')|list %}
            {% set capcode = states.sensor|selectattr('attributes.capcode', 'defined')|list %}
            {% set entities = [ "sensor.p2000_latest", "sensor.ll3", "sensor.ll4", "sensor.ll1", "sensor.ll2" ]  %}
            {% set entity = (capcode + capcodes)|sort(reverse=true,attribute='last_changed')|selectattr('entity_id', 'in',  entities)|map(attribute='entity_id')|first %}
            {%- if state_attr(entity, 'regio name') == None  %}
              ""
            {%- else %}
              {{state_attr(entity, 'regio name')}}
            {% endif %}
          discipline: >
            {% set capcodes = states.sensor|selectattr('attributes.capcodes', 'defined')|list %}
            {% set capcode = states.sensor|selectattr('attributes.capcode', 'defined')|list %}
            {% set entities = [ "sensor.p2000_latest", "sensor.ll3", "sensor.ll4", "sensor.ll1", "sensor.ll2" ]  %}
            {% set entity = (capcode + capcodes)|sort(reverse=true,attribute='last_changed')|selectattr('entity_id', 'in',  entities)|map(attribute='entity_id')|first %}
            {%- if state_attr(entity, 'discipline') == None  %}
              0
            {%- else %}
              {{state_attr(entity, 'discipline')}}
            {% endif %}
          time: >
            {% set capcodes = states.sensor|selectattr('attributes.capcodes', 'defined')|list %}
            {% set capcode = states.sensor|selectattr('attributes.capcode', 'defined')|list %}
            {% set entities = [ "sensor.p2000_latest", "sensor.ll3", "sensor.ll4", "sensor.ll1", "sensor.ll2" ]  %}
            {% set entity = (capcode + capcodes)|sort(reverse=true,attribute='last_changed')|selectattr('entity_id', 'in',  entities)|map(attribute='entity_id')|first %}
            {%- if state_attr(entity, 'time') == None  %}
              {{now()}}
            {%- else %}
              {{state_attr(entity, 'time')}}
            {% endif %}
          attribution: >
            {% set capcodes = states.sensor|selectattr('attributes.capcodes', 'defined')|list %}
            {% set capcode = states.sensor|selectattr('attributes.capcode', 'defined')|list %}
            {% set entities = [ "sensor.p2000_latest", "sensor.ll3", "sensor.ll4", "sensor.ll1", "sensor.ll2" ]  %}
            {% set entity = (capcode + capcodes)|sort(reverse=true,attribute='last_changed')|selectattr('entity_id', 'in',  entities)|map(attribute='entity_id')|first %}
            {%- if state_attr(entity, 'attribution') == None  %}
              Unknown
            {%- else %}
              {{state_attr(entity, 'attribution')}}
            {% endif %}
          friendly_name: >
            {% set capcodes = states.sensor|selectattr('attributes.capcodes', 'defined')|list %}
            {% set capcode = states.sensor|selectattr('attributes.capcode', 'defined')|list %}
            {% set entities = [ "sensor.p2000_latest", "sensor.ll3", "sensor.ll4", "sensor.ll1", "sensor.ll2" ]  %}
            {% set entity = (capcode + capcodes)|sort(reverse=true,attribute='last_changed')|selectattr('entity_id', 'in',  entities)|map(attribute='entity_id')|first %}
            {%- if state_attr(entity, 'friendly_name') == None  %}
              Unknown
            {%- else %}
              {{state_attr(entity, 'friendly_name')}}
            {% endif %}


#     - name: "p2000_latest_location"
#       state: >
#           {% set bran_reden = '(' ~ BR_code ~ '|' ~ HV_code ~ '|' ~DV_code ~ '|' ~ no_code ~ ')' %}
#           {% set br_string ='^([A-Z]{3}-[0-9]{2} |)' ~ bran_reden %}
#           {% set dienstprio ='^(A|B|P |Prio )([0-9]|) ' %}
#           {% set brackets ='\([^)]+\) *' %}
#           {% set ambu_string = '^(|( |)AMBU )([0-9]{5} |[0-9]{2}mc[0-9]{3} )+' %}
#           {% set bon_string = '([A-Z]{6} |)(rit|bon|Rit|Bon|)(: | |VWS )([0-9]{5,6}( |$))+' %}
#           {% set location1 = states('sensor.p2000_latest') |regex_replace(find=dienstprio, replace='', ignorecase=False) %}
#           {% set location2 = location1 |regex_replace(find=brackets, replace='', ignorecase=False)  %}
#           {% set location3 = location2 |regex_replace(find=ambu_string, replace='', ignorecase=False) %}
#           {% set location4 = location3 |regex_replace(find=br_string, replace='', ignorecase=False) %}
#           {% set location5 = location4 |regex_replace(find='VWS ', replace='', ignorecase=True) %}
#           {% set location = location5 |regex_replace(find=bon_string, replace='', ignorecase=False) %}
#           {{location}}

timer:
  p2000_announce:
    duration: "00:01:00"


automation:
  - id: 789d0d2c-4ee0-41af-999d-c6f5a9f28c85
    alias: Lifeliners_announce
    trigger:
#      - platform: numeric_state
#        entity_id: proximity.lifeliner
#        below: 15
      - platform: state
        entity_id:
          - sensor.ll1
          - sensor.ll2
          - sensor.ll3
          - sensor.ll4
        to:
    condition:
      - condition: and
        conditions:
          - condition: state
            entity_id:
              - schedule.tts_announce
            state: "on"
          - condition: or
            conditions:
              - condition: state
                entity_id: input_select.arnoud_status
                state: "Thuis"
              - condition: state
                entity_id: input_select.arnoud_status
                state: "Net Thuis"
          - condition: or
            conditions:
              - "{{ (state_attr(trigger.entity_id,'distance')| int <= 15000) and (state_attr(trigger.entity_id,'distance')| int != 0)}}"
              - condition: template
                value_template: >-
                  {% set dist = distance(state_attr(trigger.entity_id, 'latitude'), state_attr(trigger.entity_id, 'longitude'))| round | int %}
                  {{ dist <= 15 and dist > 0 }}

    action:
      - service: script.p2000_announce
        data:
          my_state: "{{states(trigger.entity_id)}}"
          heli: >
            {% set map = {'ll1':'Lifeliner1','ll2':'Lifeliner2','ll3':'Lifeliner3','ll4':'Lifeliner4'} %}
            {% set nearest = trigger.to_state.object_id %}
            {{map.get(nearest, 'unknown')}}


  - id: e0473ff9-da96-4466-8d7b-3ec432eb5772
    alias: P2000_announce
    trigger:
      - platform: state
        entity_id: sensor.p2000_latest
        to:
    condition:
      - condition: and
        conditions:
          - condition: state
            entity_id:
              - schedule.tts_announce
            state: "on"
          - condition: or
            conditions:
              - condition: state
                entity_id: input_select.arnoud_status
                state: "Thuis"
              - condition: state
                entity_id: input_select.arnoud_status
                state: "Net Thuis"
          - condition: or
            conditions:
              - condition: and
                conditions:
                  - condition: or
                    conditions:
                      - condition: and
                        conditions:
                          - condition: state
                            entity_id: sensor.p2000_latest
                            attribute: discipline
                            state: "Brandweerdiensten"
                          - condition: numeric_state
                            entity_id: sensor.p2000_latest
                            attribute: distance
                            above: 0.1
                            below: 7500
                      - condition: and
                        conditions:
                          - condition: state
                            entity_id: sensor.p2000_latest
                            attribute: discipline
                            state: "Ambulancediensten"
                          - condition: numeric_state
                            entity_id: sensor.p2000_latest
                            attribute: distance
                            above: 0.1
                            below: 1000
                      - condition: and
                        conditions:
                          - condition: state
                            entity_id: sensor.p2000_latest
                            attribute: discipline
                            state: "Politiediensten"
                          - condition: numeric_state
                            entity_id: sensor.p2000_latest
                            attribute: distance
                            above: 0.1
                            below: 3000
                      - condition: template
                        value_template: >-
                          {% set dist = distance(state_attr('sensor.p2000_latest' , 'latitude'), state_attr('sensor.p2000_latest', 'longitude'), states.zone.ymke_buurt)|float %}
                          {{ dist <= 0.1 and dist > 0 }}
#                  - "{{states('sensor.p2000_latest') is search('Lutjebroek|Grootebroek|Hoogkarspel', ignorecase=true)}}"
                  - "{{states('sensor.p2000_latest') is not search('VWS', ignorecase=False)}}"
                  - "{{states('sensor.p2000_latest' ) is not search('Intrekken Alarm', ignorecase=True)}}"
              - condition: and
                conditions:
                  - "{{states('sensor.p2000_latest') is search('GRIP', ignorecase=true)}}"
#                  - "{{(state_attr('sensor.p2000_latest','distance')| int <= 30000) and (state_attr('sensor.p2000_latest','distance')| int != 0)}}"
                  - condition: numeric_state
                    entity_id: sensor.p2000_latest
                    attribute: distance
                    above: 0.1
                    below: 15000

    action:
      - service: script.p2000_announce
        data:
          my_state: "{{states('sensor.p2000_latest')}}"

  - id: "c9445db9-4efb-4113-967f-4d1c58039e05"
    alias: P2000_templates_update
    mode: queued
    trigger:
      - platform: state
        entity_id: sensor.p2000_latest
        to:
      - platform: state
        entity_id:
          - sensor.ll1
          - sensor.ll2
          - sensor.ll3
          - sensor.ll4
        to:
        id: "heli"
    condition:
      - or:
        - and:
          - or:
            - and:
                - condition: state
                  entity_id: sensor.p2000_latest
                  attribute: discipline
                  state: "Brandweerdiensten"
                - condition: numeric_state
                  entity_id: sensor.p2000_latest
                  attribute: distance
                  above: 0.1
                  below: 7500
            -  and:
                - condition: state
                  entity_id: sensor.p2000_latest
                  attribute: discipline
                  state: "Ambulancediensten"
                - condition: numeric_state
                  entity_id: sensor.p2000_latest
                  attribute: distance
                  above: 0.1
                  below: 1000
            - and:
                - condition: state
                  entity_id: sensor.p2000_latest
                  attribute: discipline
                  state: "Politiediensten"
                - condition: numeric_state
                  entity_id: sensor.p2000_latest
                  attribute: distance
                  above: 0.1
                  below: 3000
            - condition: template
              value_template: >-
                {% set dist = distance(state_attr('sensor.p2000_latest' , 'latitude'), state_attr('sensor.p2000_latest', 'longitude'), states.zone.ymke_buurt)|float %}
                {{ dist <= 0.1 and dist > 0 }}
          - "{{states('sensor.p2000_latest') is not search('VWS', ignorecase=False)}}"
          - "{{states('sensor.p2000_latest' ) is not search('Intrekken Alarm', ignorecase=True)}}"
          - not:
            - condition: trigger
              id: "heli"
        - and:
          - "{{states('sensor.p2000_latest') is search('GRIP', ignorecase=true)}}"
          - condition: numeric_state
            entity_id: sensor.p2000_latest
            attribute: distance
            above: 0.1
            below: 15000
        - and:
          - condition: trigger
            id: "heli"
          - "{{ (state_attr(trigger.entity_id,'distance')| int <= 15000) and (state_attr(trigger.entity_id,'distance')| int != 0)}}"
    action:
      - choose:
        - conditions:
            - "{{ states('sensor.p2000_latest') is search('GRIP', ignorecase=true) }}"
          sequence:
            - event: p2000_grip
              event_data:
                state: "on"
        - conditions:
            - condition: trigger
              id: "heli"
          sequence:
            - event: p2000_heli
              event_data:
                state: "on"
                entity_id: "{{trigger.entity_id}}"
        - conditions:
            - "{{ is_state_attr('sensor.p2000_latest','discipline','Ambulancediensten') }}"
          sequence:
            - event: p2000_ambu
              event_data:
                state: "on"
        - conditions:
            - "{{ is_state_attr('sensor.p2000_latest','discipline','Brandweerdiensten') }}"
          sequence:
            - event: p2000_bran
              event_data:
                state: "on"

  - id: 36348df1-34fc-4466-99b1-75e2ca91415b
    alias: P2000_announce_latest
    mode: queued
    initial_state: false
    trigger:
      - platform: state
        entity_id: sensor.p2000_latest
        to:
    condition:
      - condition: and
        conditions:
          - condition: state
            entity_id:
              - schedule.tts_announce
            state: "on"
          - condition: or
            conditions:
              - condition: state
                entity_id: input_select.arnoud_status
                state: "Thuis"
              - condition: state
                entity_id: input_select.arnoud_status
                state: "Net Thuis"
          - "{{states('sensor.p2000_latest') is not search('VWS', ignorecase=False)}}"
          - "{{states('sensor.p2000_latest') is not search('Intrekken Alarm', ignorecase=True)}}"
    action:
      - service: script.p2000_announce
        data:
          my_state: "{{states(trigger.entity_id)}}"

  - id: c475440e-1301-4a0b-9b14-2ebb14aae027
    alias: Lifeliners_pushover
    mode: queued
    trigger:
#      - platform: state
#        entity_id: proximity.lifeliner
      - platform: state
        entity_id:
          - sensor.ll1
          - sensor.ll2
          - sensor.ll3
          - sensor.ll4
        to:
    action:
      - service: notify.pushover
        data:
          message: >
            {% set map = {'ll1':'Lifeliner1','ll2':'Lifeliner2','ll3':'Lifeliner3','ll4':'Lifeliner4'} %}
            {% set nearest = trigger.to_state.object_id %}
            {% set sensor = trigger.entity_id %}
            {% set ll_state = states(sensor)| regex_replace(find='^A[0-9] ', replace='', ignorecase=False) |regex_replace(find='\(DIA(|(:|=) (ja|nee))\) ', replace='', ignorecase=False) |regex_replace(find='^([0-9]+ )+|^AMBU ([0-9]+ )+', replace='', ignorecase=False) |regex_replace(find='((rit|bon) .+|([0-9]{5} )+)', replace='', ignorecase=true) %}
            Lifeliner: {{map.get(nearest, 'unknown')}}
            state: {{states(sensor)}}
            modified state: {{ll_state}}
            coords: {{state_attr(sensor,'longitude')}},{{state_attr(sensor,'latitude')}}
            dist: {{ state_attr(trigger.entity_id,'distance')| int}}
            dist2: {{ (distance(state_attr(trigger.entity_id, 'latitude'), state_attr(trigger.entity_id, 'longitude')) | round | int)}}
          title: >
            {% set map = {'ll1':'Lifeliner1','ll2':'Lifeliner2','ll3':'Lifeliner3','ll4':'Lifeliner4'} %}
            {% set nearest = trigger.to_state.object_id %}
            {{map.get(nearest, 'unknown')}}
          data:
            priority: -1

  - alias: "NL gdacs alert"
    trigger:
      platform: geo_location
      source: gdacs
      zone: zone.nederland
      event: enter
#    condition:
#      - "{{is_state_attr(trigger.entity_id, 'country', 'Netherlands')}}"  
    action:
      - service: persistent_notification.create
        data:
          message: >
            {{ trigger.to_state.name }} - {{ trigger.to_state.attributes['event type'] }} - {{trigger.to_state.attributes.country}} - {{ trigger.to_state.attributes['alert level'] }}
            {{trigger.to_state.attributes.description}}
          title: "NL gdacs alert"
script:
  p2000_announce:
    mode: queued
    fields:
      my_state:
        description: "Entity state"
        example: "A2 10112 Rit 96886 VWS Hoogkarspel Sluisweg"
      heli:
        description: "heli beschrijving als alternate dienst (optional)"
        example: "Lifeliner 1"
    sequence:
      # Wait until media player is stopped
#      - service: timer.start
#        target:
#          entity_id: timer.p2000_announce
#      - alias: "Wait until media player is stopped or timer runs out"
#        wait_template: "{{ is_state('media_player.speakers', 'idle') or is_state('media_player.speakers', 'off') or is_state('timer.p2000_announce', 'idle')}}"
      - alias: "mute the soundbar"
        service: media_player.volume_mute
        target:
          entity_id: media_player.ht_nt5_surround
        data:
          is_volume_muted: true
      - alias: "Send TTS using Google Home Resume script"
        service: script.turn_on
        target:
          entity_id: script.google_home_resume
        data:
          variables:
            action:
              - alias: "Send TTS message"
                service: tts.google_say
                target:
                  entity_id: media_player.speakers
                data:
                  message: >
                    {% set BR_code ='BR (woning|gezondheidszorg|ziekenhuis|buiten|berm-/bosschage|container|gerucht|industrie|nablussen|wegvervoer|nacontrole|afval|gebouw|agrarisch) ' %}
                    {% set HV_code ='HV (materieel|(weg |spoor |water )(letsel|materieel|)|overig) *' %}
                    {% set DV_code ='DV (aan derden|Brw) ' %}
                    {% set no_code ='(CO-melder|Rookmelder|Liftopsluiting|Ass. (Ambu|Pol)|Reanimatie|(PAC|OMS) (brandmelding|handmelder)|(Persoon|Voertuig) te water|Wateroverlast|Uitval nutsvoorz.|Persoon te water|Dier (in problemen|op hoogte|te water|in put/kelder)|Stank/hind. lucht|Luid/optisch alarm|Stormschade) ' %}
                    {% set bran_reden = '(' ~ BR_code ~ '|' ~ HV_code ~ '|' ~DV_code ~ '|' ~ no_code ~ ')' %}
                    {% set br_string ='^([A-Z]{3}-[0-9]{2} |)' ~ bran_reden %}
                    {% set dienstprio ='^(A|B|P |Prio )([0-9]|) ' %}
                    {% set brackets ='\([^)]+\) *' %}
                    {% set ambu_string = '^(( |)AMBU |)([0-9]{5} |[0-9]{2}mc[0-9]{3} )+' %}
                    {% set bon_string = '([A-Z]{6} |)(rit|bon|Rit|Bon|)(: | |VWS )([0-9]{5,6}( |$))+' %}
                    {% set mapdienst = {'A':'Ambulance','B':'Ambulance','P':'Brandweer'} %}
                    {% set mapreden = {'BR':'Brand,','HV':'Hulpverlening,', 'DV':'Dienstverlening,'} %}
                    {% set mapast = {'Ass. Ambu ':'Assistentie ambulance','Ass. Pol ':'Assistentie Politie','Stank/hind. lucht ':'Stank of hinderlijke lucht'} %}
                    {% set location1 = my_state |regex_replace(find=dienstprio, replace='', ignorecase=False) %}
                    {% set location2 = location1 |regex_replace(find=brackets, replace='', ignorecase=False)  %}
                    {% set location3 = location2 |regex_replace(find=ambu_string, replace='', ignorecase=False) %}
                    {% set location4 = location3 |regex_replace(find=br_string, replace='', ignorecase=False) %}
                    {% set location = location4 |regex_replace(find=bon_string, replace='', ignorecase=False) %}
                    {% if location3 is search(br_string, ignorecase=True) %}
                        {% set reden1 = location3 | regex_findall_index(find=bran_reden, index=0, ignorecase=False)|first %}
                        {% if reden1 is search('^(HV|BR|DV)', ignorecase=True) %}
                          {% set reden2 = reden1 |regex_findall_index(find='^(HV|BR|DV)', index=0, ignorecase=False) %}
                          {% set reden = mapreden.get(reden2, 'unknown') ~ reden1 |regex_replace(find='^(HV|BR|DV)', replace='', ignorecase=false) %}
                        {% else %}
                          {% set reden2 = '' %}
                          {% set reden = mapast.get(reden1, reden1)  %}
                        {% endif %}
                    {% else %}
                      {% set reden1 = '' %}
                      {% set reden2 = '' %}
                      {% set reden = '' %}
                    {% endif %}
                    {% set dienst1 = my_state | regex_findall_index(find='^(A|B|P)', index=0, ignorecase=False)|first  %}
                    {% if heli  %}
                      {% set dienst = heli %}
                    {% else %}
                      {% set dienst = mapdienst.get(dienst1, 'unknown') %}
                    {% endif %}
                    {% if reden %}
                      De {{dienst}} is onderweg naar {{location}} voor {{reden}}
                    {% else %}
                      De {{dienst}} is onderweg naar {{location}}
                    {% endif %}
                  cache: false
                  language: "nl"

      - alias: "Wait until the target is idle or off before applying the volume for the TTS message"
        wait_template: "{{ states('media_player.speakers') in ['idle', 'off'] }}"
      - alias: "Apply TTS volume"
        service: media_player.volume_set
        target:
          entity_id: media_player.speakers
        data:
          volume_level: "{{states('input_number.p2000_announce_volume')|float}}"
      - delay: "00:00:10"
      - alias: "unmute the soundbar"
        service: media_player.volume_mute
        target:
          entity_id: media_player.ht_nt5_surround
        data:
          is_volume_muted: false
